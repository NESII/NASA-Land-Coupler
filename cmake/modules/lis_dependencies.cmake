#   Link LIS Dependencies to target
#

function(target_link_lis_dependencies lis_target)

  # JASPER
  if (DEFINED ENV{LIS_JASPER} AND NOT DEFINED LIS_JASPER)
    set(LIS_JASPER $ENV{LIS_JASPER} CACHE FILEPATH "Path to JASPER directory")
  endif ()
  if (EXISTS ${LIS_JASPER})
    set(JASPER_FOUND TRUE CACHE BOOL "JASPER directory file found" FORCE)
    add_library(LIS::JASPER UNKNOWN IMPORTED)
    find_library(JASPER_LIB NAMES jasper PATHS ${LIS_JASPER} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::JASPER PROPERTIES
      IMPORTED_LOCATION "${JASPER_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::JASPER)
  else()
    set(JASPER_FOUND FALSE CACHE BOOL "JASPER directory NOT found" FORCE)
    if (NOT DEFINED LIS_JASPER)
      message(WARNING "LIS_JASPER not defined")
    endif ()
  endif()

  # OPENJPEG
  if (DEFINED ENV{LIS_OPENJPEG} AND NOT DEFINED LIS_OPENJPEG)
    set(LIS_OPENJPEG $ENV{LIS_OPENJPEG} CACHE FILEPATH "Path to OPENJPEG directory")
  endif ()
  if (EXISTS ${LIS_OPENJPEG})
    set(OPENJPEG_FOUND TRUE CACHE BOOL "OPENJPEG directory file found" FORCE)
    add_library(LIS::OPENJPEG UNKNOWN IMPORTED)
    find_library(OPENJPEG_LIB NAMES openjp2 PATHS ${LIS_OPENJPEG} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::OPENJPEG PROPERTIES
      IMPORTED_LOCATION "${OPENJPEG_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::OPENJPEG)
  else()
    set(OPENJPEG_FOUND FALSE CACHE BOOL "OPENJPEG directory NOT found" FORCE)
    if (NOT DEFINED LIS_OPENJPEG)
      message(WARNING "LIS_OPENJPEG not defined")
    endif ()
  endif()

  # GRIBAPI
  if (DEFINED ENV{LIS_GRIBAPI} AND NOT DEFINED LIS_GRIBAPI)
    set(LIS_GRIBAPI $ENV{LIS_GRIBAPI} CACHE FILEPATH "Path to GRIBAPI directory")
  endif()
  if (EXISTS ${LIS_GRIBAPI})
    set(GRIBAPI_FOUND TRUE CACHE BOOL "GRIBAPI directory file found" FORCE)
    add_library(LIS::GRIBAPI UNKNOWN IMPORTED)
    find_library(GRIBAPI_LIB NAMES grib_api PATHS ${LIS_GRIBAPI} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::GRIBAPI PROPERTIES
      IMPORTED_LOCATION "${GRIBAPI_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::GRIBAPI)
    add_library(LIS::GRIBAPI_F90 UNKNOWN IMPORTED)
    find_library(GRIBAPI_F90_LIB NAMES grib_api_f90 PATHS ${LIS_GRIBAPI} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::GRIBAPI_F90 PROPERTIES
      IMPORTED_LOCATION "${GRIBAPI_F90_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::GRIBAPI_F90)
  else()
    set(GRIBAPI_FOUND FALSE CACHE BOOL "GRIBAPI directory NOT found" FORCE)
    if (NOT DEFINED LIS_GRIBAPI)
      message(WARNING "LIS_GRIBAPI not defined")
    endif ()
  endif()

  # ECCODES
  if (DEFINED ENV{LIS_ECCODES} AND NOT DEFINED LIS_ECCODES)
    set(LIS_ECCODES $ENV{LIS_ECCODES} CACHE FILEPATH "Path to ECCODES directory")
  endif ()
  if (EXISTS ${LIS_ECCODES})
    set(ECCODES_FOUND TRUE CACHE BOOL "ECCODES directory file found" FORCE)
    add_library(LIS::ECCODES UNKNOWN IMPORTED)
    find_library(ECCODES_LIB NAMES eccodes PATHS ${LIS_ECCODES} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::ECCODES PROPERTIES
      IMPORTED_LOCATION "${ECCODES_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::ECCODES)
    add_library(LIS::ECCODES_F90 UNKNOWN IMPORTED)
    find_library(ECCODES_F90_LIB NAMES eccodes_f90 PATHS ${LIS_ECCODES} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::ECCODES_F90 PROPERTIES
      IMPORTED_LOCATION "${ECCODES_F90_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::ECCODES_F90)
  else()
    set(ECCODES_FOUND FALSE CACHE BOOL "ECCODES directory NOT found" FORCE)
    if (NOT DEFINED LIS_ECCODES)
      message(WARNING "LIS_ECCODES not defined")
    endif ()
  endif()

  # HDF4
  if (DEFINED ENV{LIS_HDF4} AND NOT DEFINED LIS_HDF4)
    set(LIS_HDF4 $ENV{LIS_HDF4} CACHE FILEPATH "Path to HDF4 directory")
  endif ()
  if (EXISTS ${LIS_HDF4})
    set(HDF4_FOUND TRUE CACHE BOOL "HDF4 directory file found" FORCE)
    find_package(ZLIB)
    target_link_libraries(${lis_target} PUBLIC ZLIB::ZLIB)
    find_package(JPEG)
    target_link_libraries(${lis_target} PUBLIC JPEG::JPEG)
    add_library(LIS::DF UNKNOWN IMPORTED)
    find_library(DF_LIB NAMES df PATHS ${LIS_HDF4} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::DF PROPERTIES
      IMPORTED_LOCATION "${DF_LIB}")
    target_link_libraries(LIS::DF INTERFACE ZLIB::ZLIB)
    target_link_libraries(LIS::DF INTERFACE JPEG::JPEG)
    target_link_libraries(${lis_target} PUBLIC LIS::DF)
    add_library(LIS::MFHDF UNKNOWN IMPORTED)
    find_library(MFHDF_LIB NAMES mfhdf PATHS ${LIS_HDF4} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::MFHDF PROPERTIES
      IMPORTED_LOCATION "${MFHDF_LIB}")
    target_link_libraries(LIS::MFHDF INTERFACE LIS::DF)
    target_link_libraries(${lis_target} PUBLIC LIS::MFHDF)
  else()
    set(HDF4_FOUND FALSE CACHE BOOL "HDF4 directory NOT found" FORCE)
    if (NOT DEFINED LIS_HDF4)
      message(WARNING "LIS_HDF4 not defined")
    endif ()
  endif()

  # HDF5
  if (DEFINED ENV{LIS_HDF5} AND NOT DEFINED LIS_HDF5)
    set(LIS_HDF5 $ENV{LIS_HDF5} CACHE FILEPATH "Path to HDF5 directory")
  endif ()
  if (EXISTS ${LIS_HDF5})
    set(HDF5_FOUND TRUE CACHE BOOL "HDF5 directory file found" FORCE)
    add_library(LIS::HDF5 UNKNOWN IMPORTED)
    find_library(HDF5_LIB NAMES hdf5 PATHS ${LIS_HDF5} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::HDF5 PROPERTIES
      IMPORTED_LOCATION "${HDF5_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::HDF5)
    add_library(LIS::HDF5_FORTRAN UNKNOWN IMPORTED)
    find_library(HDF5_FORTRAN_LIB NAMES hdf5_fortran PATHS ${LIS_HDF5} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::HDF5_FORTRAN PROPERTIES
      IMPORTED_LOCATION "${HDF5_FORTRAN_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::HDF5_FORTRAN)
    add_library(LIS::HDF5_HL UNKNOWN IMPORTED)
    find_library(HDF5_HL_LIB NAMES hdf5_hl PATHS ${LIS_HDF5} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::HDF5_HL PROPERTIES
      IMPORTED_LOCATION "${HDF5_HL_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::HDF5_HL)
  else()
    set(HDF5_FOUND FALSE CACHE BOOL "HDF5 directory NOT found" FORCE)
    if (NOT DEFINED LIS_HDF5)
      message(WARNING "LIS_HDF5 not defined")
    endif ()
  endif()

  # HDFEOS
  if (DEFINED ENV{LIS_HDFEOS} AND NOT DEFINED LIS_HDFEOS)
    set(LIS_HDFEOS $ENV{LIS_HDFEOS} CACHE FILEPATH "Path to HDFEOS directory")
  endif ()
  if (EXISTS ${LIS_HDFEOS})
    set(HDFEOS_FOUND TRUE CACHE BOOL "HDFEOS directory file found" FORCE)
    add_library(LIS::HDFEOS UNKNOWN IMPORTED)
    find_library(HDFEOS_LIB NAMES hdfeos PATHS ${LIS_HDFEOS} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::HDFEOS PROPERTIES
      IMPORTED_LOCATION "${HDFEOS_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::HDFEOS)
    add_library(LIS::GCTP UNKNOWN IMPORTED)
    find_library(GCTP_LIB NAMES Gctp PATHS ${LIS_HDFEOS} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::GCTP PROPERTIES
      IMPORTED_LOCATION "${GCTP_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::GCTP)
  else()
    set(HDFEOS_FOUND FALSE CACHE BOOL "HDFEOS directory NOT found" FORCE)
    if (NOT DEFINED LIS_HDFEOS)
      message(WARNING "LIS_HDFEOS not defined")
    endif ()
  endif()

  # NETCDF
  if (DEFINED ENV{LIS_NETCDF} AND NOT DEFINED LIS_NETCDF)
    set(LIS_NETCDF $ENV{LIS_NETCDF} CACHE FILEPATH "Path to NETCDF directory")
  endif ()
  if (EXISTS ${LIS_NETCDF})
    set(NETCDF_FOUND TRUE CACHE BOOL "NETCDF directory file found" FORCE)
    add_library(LIS::NETCDF UNKNOWN IMPORTED)
    find_library(NETCDF_LIB NAMES netcdf PATHS ${LIS_NETCDF} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::NETCDF PROPERTIES
      IMPORTED_LOCATION "${NETCDF_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::NETCDF)
    add_library(LIS::NETCDFF UNKNOWN IMPORTED)
    find_library(NETCDFF_LIB NAMES netcdff PATHS ${LIS_NETCDF} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::NETCDFF PROPERTIES
      IMPORTED_LOCATION "${NETCDFF_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::NETCDFF)
  else()
    set(NETCDF_FOUND FALSE CACHE BOOL "NETCDF directory NOT found" FORCE)
    if (NOT DEFINED LIS_NETCDF)
      message(WARNING "LIS_NETCDF not defined")
    endif ()
  endif()

  # RPC
  if (DEFINED ENV{LIS_RPC} AND NOT DEFINED LIS_RPC)
    set(LIS_RPC $ENV{LIS_RPC} CACHE FILEPATH "Path to RPC directory")
  endif ()
  if (EXISTS ${LIS_RPC})
    set(RPC_FOUND TRUE CACHE BOOL "RPC directory file found" FORCE)
    add_library(LIS::RPC UNKNOWN IMPORTED)
    find_library(RPC_LIB NAMES tirpc PATHS ${LIS_RPC} PATH_SUFFIXES lib lib64)
    set_target_properties(LIS::RPC PROPERTIES
      IMPORTED_LOCATION "${RPC_LIB}")
    target_link_libraries(${lis_target} PUBLIC LIS::RPC)
  else()
    set(RPC_FOUND FALSE CACHE BOOL "RPC directory NOT found" FORCE)
    if (NOT DEFINED LIS_RPC)
      message(WARNING "LIS_RPC not defined")
    endif ()
  endif()

endfunction()
